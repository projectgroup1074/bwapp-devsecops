pipeline {
    agent any

    environment {
        SONARQUBE_ENV = credentials('sonar-token') // Jenkins credentials ID for SonarQube
        GIT_CRED = 'Githubtoken' // Jenkins credentials ID for GitHub
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                    credentialsId: "${GIT_CRED}", 
                    url: 'https://github.com/projectgroup1074/bwapp-devsecops.git'
            }
        }

        stage('Build & Run Containers') {
            steps {
                dir('bwapp') {
                    sh '''
                        echo "üßπ Cleaning up old containers and networks..."
                        docker rm -f bwapp_mysql bwapp_web || true
                        docker-compose -f docker-compose.bwapp.yml down --remove-orphans || true
                        
                        echo "üöÄ Starting containers..."
                        docker-compose -f docker-compose.bwapp.yml up -d --force-recreate
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh """
                        sonar-scanner \
                          -Dsonar.projectKey=bwapp \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://sonarqube:9000 \
                          -Dsonar.login=${SONARQUBE_ENV}
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Security Scan (DefectDojo Placeholder)') {
            steps {
                echo 'üîç Here we would run DefectDojo API scans...'
            }
        }
    }

    post {
        always {
            echo "üì¶ Cleaning up containers after build..."
            sh '''
                docker rm -f bwapp_mysql bwapp_web || true
                docker-compose -f docker-compose.bwapp.yml down --remove-orphans || true
            '''
        }
    }
}
