pipeline {
    agent any

    environment {
        SONARQUBE_ENV = credentials('sonarqube-token') // Replace with your SonarQube token ID
        GITHUB_CRED = credentials('Githubtoken')      // Your GitHub credentials ID
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    credentialsId: "${GITHUB_CRED}",
                    url: 'https://github.com/projectgroup1074/bwapp-devsecops.git'
            }
        }

        stage('Build & Run Containers') {
            steps {
                script {
                    echo "üßπ Cleaning old containers..."
                    sh '''
                        docker rm -f bwapp_mysql bwapp_web || true
                        docker network rm bwapp_bwapp_net || true
                        docker-compose -f bwapp/docker-compose.bwapp.yml down --remove-orphans || true
                    '''

                    echo "üöÄ Starting containers..."
                    sh '''
                        docker-compose -f bwapp/docker-compose.bwapp.yml up -d --force-recreate
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('MySonarQubeServer') { // Jenkins SonarQube server name
                    sh '''
                        echo "üîç Running SonarQube analysis..."
                        # Example - replace with your sonar-scanner command
                        sonar-scanner \
                            -Dsonar.projectKey=bwapp-devsecops \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONARQUBE_ENV
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Security Scan (DefectDojo Placeholder)') {
            steps {
                sh '''
                    echo "üîí Running DefectDojo security scan placeholder..."
                    # Add DefectDojo API scan commands here later
                '''
            }
        }
    }

    post {
        always {
            echo "üì¶ Cleaning up containers after build..."
            sh '''
                docker rm -f bwapp_mysql bwapp_web || true
                docker-compose -f bwapp/docker-compose.bwapp.yml down --remove-orphans || true
            '''
        }
    }
}
